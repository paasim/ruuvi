name: release
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      ruuvi_version: ${{ env.RUUVI_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Get the release version from the tag
        run: |
          echo "RELEASE_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }} # from https://cli.github.com/manual/gh_auth_login
        run: gh release create ${{ env.RELEASE_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      
    strategy:
      matrix:
        build: [linux, linux-arm]
        include:
        - build: linux
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          target: arm-unknown-linux-gnueabihf
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: install dependencies
      run: sudo apt-get update && sudo apt-get install xz-utils musl-tools libdbus-1-dev

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (x86)
      if: matrix.build == 'linux'
      run: strip "target/${{ matrix.target }}/release/ruuvi"
    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/${{ matrix.target }}/release/ruuvi

    - name: Build archive
      shell: bash
      run: |
        staging="ruuvi-${{ needs.create-release.outputs.ruuvi_version }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp README.md "$staging/"
        cp "target/${{ matrix.target }}/release/ruuvi" "$staging/"
        tar czf "$staging.tar.gz" "$staging"
        shasum -a 256 "$staging.tar.gz" > "$staging.tar.gz.sha256"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$staging.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ needs.create-release.outputs.ruuvi_version }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}
